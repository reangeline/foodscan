// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package factory

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/reangeline/foodscan_backend/internal/domain/contract/repository"
	usecase2 "github.com/reangeline/foodscan_backend/internal/domain/contract/usecase"
	"github.com/reangeline/foodscan_backend/internal/domain/usecase"
	"github.com/reangeline/foodscan_backend/internal/infra/database"
	"github.com/reangeline/foodscan_backend/internal/presentation/controller"
	"github.com/reangeline/foodscan_backend/internal/presentation/validation/protocol"
	"github.com/reangeline/foodscan_backend/internal/presentation/validation/validator"
)

// Injectors from wire.go:

func InitializeUser(db *sql.DB) (*controller.UserController, error) {
	userRepository := database.NewUserRepository(db)
	userUseCase := usecase.NewUserUseCase(userRepository)
	userValidator := validator.NewUserValidator()
	userController := controller.NewUserController(userUseCase, userValidator)
	return userController, nil
}

// wire.go:

var setUserRepositoryDependency = wire.NewSet(database.NewUserRepository, wire.Bind(new(repository.UserRepositoryInterface), new(*database.UserRepository)))

var setUserUseCaseDependency = wire.NewSet(usecase.NewUserUseCase, wire.Bind(new(usecase2.UserUseCaseInterface), new(*usecase.UserUseCase)))

var setUserValidatorDependency = wire.NewSet(validator.NewUserValidator, wire.Bind(new(protocol.UserValidatorInterface), new(*validator.UserValidator)))
