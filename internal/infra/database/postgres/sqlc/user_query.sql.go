// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_query.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id_user, name, last_name, email) 
VALUES ($1,$2,$3,$4)
RETURNING id_user, name, last_name, email, created_at
`

type CreateUserParams struct {
	IDUser   uuid.UUID
	Name     string
	LastName string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.IDUser,
		arg.Name,
		arg.LastName,
		arg.Email,
	)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id_user, name, last_name, email, created_at FROM users
WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
